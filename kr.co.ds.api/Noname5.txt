package kr.co.ds.custom.vehicle.Repository;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.joda.time.LocalTime;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.framework.dox.dbwork.DAOException;
import com.framework.dox.dbwork.DAOHelper;
import com.framework.dox.dbwork.DataBox;
import com.framework.dox.dbwork.Query;
import com.framework.dox.dbwork.QueryException;
import com.framework.dox.dbwork.QueryExecutor;
import com.framework.dox.dbwork.QueryHandler;
import com.framework.dox.dbwork.QueryHelper;
import com.framework.dox.dbwork.QueryParameter;
import com.framework.dox.util.DateUtil;

import kr.co.ds.custom.vehicle.comm.Label;
import kr.co.ds.custom.vehicle.domain.TruckEntryEntity;
import kr.co.ds.custom.vehicle.domain.TruckLocationEntity;
import kr.co.ds.custom.vehicle.domain.TruckResultEntity;
import kr.co.ds.custom.vehicle.domain.TruckStandardEntity;

public class TruckRepository {

	private static Logger logger = Logger.getLogger(TruckRepository.class);

	// 차량 관제 실시간 인증키 생성 (업체 인증키 : S1610-3393-F997--545)
	@SuppressWarnings("unchecked")
	public static TruckStandardEntity getAccessKey() {

		String url = Label.TruckServiceLabel.CALL_ACCESSKEY.getMsg();
		String clientId = Label.TruckServiceLabel.CLIENT_ID.getMsg();

		try {
			// URL 연결 설정
			HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
			connection.setRequestMethod(Label.TruckServiceLabel.POST.getCode());
			connection.setRequestProperty("Content-Type", "application/json");
			connection.setDoOutput(true);

			// 요청 데이터 생성
			JSONObject requestData = new JSONObject();
			requestData.put("client_id", clientId);

			// 요청 전송
			OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
			writer.write(requestData.toString());
			writer.flush();
			writer.close();

			// 응답 확인
			int responseCode = connection.getResponseCode();
			if (responseCode == HttpURLConnection.HTTP_OK) {
				// 응답 데이터 읽기
				BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"));
				StringBuilder response = new StringBuilder();
				String line;
				while ((line = reader.readLine()) != null) {
					response.append(line);
				}
				reader.close();

				// TruckStandardEntity 생성 및 설정
				TruckStandardEntity truckStandardEntity = new TruckStandardEntity();
				JSONParser jsonParser = new JSONParser();
				JSONObject jsonResponse = (JSONObject) jsonParser.parse(response.toString());
				String accessKey = (String) jsonResponse.get("client_secret");
				truckStandardEntity.setAccessKey(accessKey);
				return truckStandardEntity;

			} else {
				logger.error("HTTP Error: " + responseCode);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * 기준치 데이터(접수물량기준 :14일) 이전 데이터 삭제 모듈
	 * 해당 모듈은 하루에 한번씩만 해야 하는데
	 * @param paramSetEntity 
	 */
	public void deleteTruckData() {
		
		logger.info(" /--------- Delete data older than 14 days.. start");
		
		Query query = null;
		QueryExecutor executor = null;
		QueryHelper queryHelper = null;
		DAOHelper daoHelper = null;
		
		try{
		
			daoHelper = new DAOHelper();
			queryHelper = new QueryHelper();

			executor = daoHelper.getDataSourceExecutor("main_code");  
			executor.setNvl("");
			query = queryHelper.getQuery("vehicle.qry", "delete_entry");
			executor.execute(query);
			
		}catch (Exception e){
			logger.error("deleteTruckData : " + e.toString());
		}
	}
	
	
	/**
	 * 단일 정보 확인 알맞은 파라미터를 set 한 이후 return 타입 설정후 사용
	 * 
	 * @param entity
	 * @return
	 */
	@SuppressWarnings("unlikely-arg-type")
	public static Object getEntryInfo(TruckStandardEntity setParamEntity) {
	    //logger.info(setParamEntity.toString());
		
		if ( isValidParameters(setParamEntity)) {
			try {
		        URL url = new URL(Label.TruckServiceLabel.CALL_TRUCKINFO.getMsg());
		        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		        conn.setRequestMethod(Label.TruckServiceLabel.POST.getCode());

		        Map<String, String> params = new HashMap<>();
		        params.put("method", "getDeviceAPI");
		        params.put("AccessKey", setParamEntity.getAccessKey());
		        params.put("GUBUN", setParamEntity.getGubun());
		        params.put("KEY_DATE", setParamEntity.getKey_date());
		        params.put("KEY_CM_NUMBER", setParamEntity.getKey_cm_number());

		        StringBuilder postData = new StringBuilder();

		        for (Map.Entry<String, String> param : params.entrySet()) {
		            if (postData.length() != 0)
		                postData.append('&');
		            postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));
		            postData.append('=');
		            postData.append(URLEncoder.encode(param.getValue(), "UTF-8"));
		        }
		        byte[] postDataBytes = postData.toString().getBytes("UTF-8");

		        conn.setDoOutput(true);
		        conn.getOutputStream().write(postDataBytes);

		        int responseCode = conn.getResponseCode();
		        setParamEntity.setResponseCode(responseCode);
		        if (responseCode == HttpURLConnection.HTTP_OK) {
		            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
		            StringBuilder sb = new StringBuilder();
		            String line;
		            while ((line = br.readLine()) != null) {
		                sb.append(line);
		            }
		            br.close();
		            if ( sb.toString().equals(Label.TruckServiceLabel.REPLACENULL.getMsg())) {
		            	sb = null;
		            }
		            if (sb != null && sb.length() > 0) {
		                String response = sb.toString();
		                
		                if (setParamEntity.getResponseType().equals(Label.TruckServiceLabel.JSON.getMsg())) {
		                    return sb;
		                } else {
		                    return parseResponse(response, setParamEntity);
		                }
		            } else {
		                return handleEmptyResponse(setParamEntity);
		            }
		        } else {
		            return handleFailedRequest(setParamEntity);
		        }
		    } catch (IOException | ParseException e) {
		        e.printStackTrace();
		    }
		}else {
			logger.info(Label.TruckServiceLabel.PARAM_ERROR.getMsg());
		}
	    
	    return null;
	}

	private static List<TruckStandardEntity> parseResponse(String response, TruckStandardEntity haveParamEntity) throws ParseException {
		
	    JSONParser parser = new JSONParser();
	    JSONArray dataArray = (JSONArray) parser.parse(response);

	    List<TruckStandardEntity> entities = new ArrayList<>();

	    for (Object obj : dataArray) {
	        JSONObject jsonObject = (JSONObject) obj;
	        TruckStandardEntity truckStandardEntity = new TruckStandardEntity();

	        if (haveParamEntity.getGubun().equals("1")) {
	            TruckEntryEntity truckEntryEntity = new TruckEntryEntity();
	            truckEntryEntity.setCm_number((String) jsonObject.get("CM_NUMBER"));
	            truckEntryEntity.setGeo_op_type((String) jsonObject.get("GEO_OP_TYPE"));
	            truckEntryEntity.setGeo_date((String) jsonObject.get("GEO_DATE"));
	            truckEntryEntity.setGeo_name((String) jsonObject.get("GEO_NAME"));
	            truckEntryEntity.setGeo_time((String) jsonObject.get("GEO_TIME"));

	            truckStandardEntity.setTruckEntryEntity(truckEntryEntity);
	        } else {
	            TruckLocationEntity truckLocationEntity = new TruckLocationEntity();
	            truckLocationEntity.setCm_number((String) jsonObject.get("CM_NUMBER"));
	            truckLocationEntity.setBi_date((String) jsonObject.get("BI_DATE"));
	            truckLocationEntity.setBi_dist_total((String) jsonObject.get("BI_DIST_TOTAL"));
	            truckLocationEntity.setBi_x_position((String) jsonObject.get("BI_X_POSITION"));
	            truckLocationEntity.setBi_y_position((String) jsonObject.get("BI_Y_POSITION"));
	            truckLocationEntity.setBi_turn_onoff((String) jsonObject.get("BI_TURN_ONOFF"));
	            truckLocationEntity.setTid_id((String) jsonObject.get("TID_ID"));
	            truckLocationEntity.setBi_time((String) jsonObject.get("BI_TIME"));
	            truckLocationEntity.setBi_gps_speed((String) jsonObject.get("BI_GPS_SPEED"));

	            truckStandardEntity.setTruckLocationEntity(truckLocationEntity);
	        }

	        truckStandardEntity.setResponseCode(haveParamEntity.getResponseCode());
	        entities.add(truckStandardEntity);
	    }

	    return entities;
	}

	private static Object handleEmptyResponse(TruckStandardEntity truckStandardEntity) {
		//logger.info("data empty");
	    truckStandardEntity.setErrorMessage(Label.TruckServiceLabel.NULL.getMsg());

	    if (truckStandardEntity.getResponseType().equals(Label.TruckServiceLabel.JSON.getMsg())) {
	        return entityToJSON(truckStandardEntity);
	    } else {
	        List<TruckStandardEntity> entities = new ArrayList<>();
	        entities.add(truckStandardEntity);
	        return entities;
	    }
	}

	private static Object handleFailedRequest(TruckStandardEntity truckStandardEntity) {
		//logger.info("api false");
		truckStandardEntity.setErrorMessage(Label.TruckServiceLabel.HTTP500.getMsg());

	    if (truckStandardEntity.getResponseType().equals(Label.TruckServiceLabel.JSON.getMsg())) {
	        return entityToJSON(truckStandardEntity); 
	    } else {
	        List<TruckStandardEntity> entities = new ArrayList<>();
	        entities.add(truckStandardEntity);
	        return entities;
	    }
	}
	
	/**
	 * 자료 생성(스케줄러 실행) service -> inputControlData
	 */
	@SuppressWarnings({ "unchecked", "unused" })
	public void inputControlData() {
		// 1. viewTable 생성 : CODE.V_LINEINFO
		// 2. 시간대별 앞자리수 생성
		
		TruckStandardEntity paramSetEntity = null;
		ArrayList<TruckStandardEntity> entities = null;
		DataBox groupDataBox = null;
		Object result = null;
		
		try {
			paramSetEntity = new TruckStandardEntity();
			paramSetEntity.setAccessKey(getAccessKey().getAccessKey());
			paramSetEntity.setGubun(Label.TruckServiceLabel.ONE.getMsg());
			paramSetEntity.setKey_date(DateUtil.getCurrentDate().replace("-", ""));
			//paramSetEntity.setKey_date("20230609");
			
			paramSetEntity.setResponseType(Label.TruckServiceLabel.ARRAY.getMsg());
			paramSetEntity.setTargetHour(setCurrentTimeGroup());
			
			if ( isValidParameters(paramSetEntity)) {
				
				groupDataBox = getCurrentTimeGroupData(paramSetEntity);
				
				if (groupDataBox != null && groupDataBox.getRowSize() > 0) {
				
					/* param Setting */
					for (int i = 0; i < groupDataBox.getRowSize(); i++) {
						
						logger.info("carNumber : " + groupDataBox.getString(i, "carnumber") + ", linecode : "  +groupDataBox.getString(i, "linecode") + ", linename : "  +groupDataBox.getString(i, "linename"));
						
						paramSetEntity.setKey_cm_number(groupDataBox.getString(i, "carnumber"));
						paramSetEntity.setLineCode(groupDataBox.getString(i, "linecode"));
						paramSetEntity.setLineName(groupDataBox.getString(i, "linename"));
						entities = new ArrayList<TruckStandardEntity>();
						
						result = getEntryInfo(paramSetEntity);
						entities = (ArrayList<TruckStandardEntity>) result;
						
						if ( entities != null && entities.size() > 0) {
							isSaveData(entities, paramSetEntity, getNosunStartPointAgency(paramSetEntity));
							//test(entities);
						}else {
							logger.info("entities.. No data currently found");	
						}
					}
				}else {
					logger.info("No data currently found");
				}
			}else {
				logger.info(Label.TruckServiceLabel.PARAM_ERROR.getMsg());
			}

		} catch (Exception e) {
			logger.info("error : " + e);
		}
		// 출력
		//isResult();
	}

	@SuppressWarnings("unchecked")
	private static ArrayList<TruckResultEntity> isAfterTreatment() {
		
		QueryParameter parameter = null;
		QueryExecutor executor = null;
		QueryHelper queryHelper = null;
		DAOHelper daoHelper = null;
		DataBox dataBox = null;
		Query query = null;
		ArrayList<TruckResultEntity> resultEntities = null;
		TruckResultEntity resultEntity = null;
		
		// 새로 담을 entity 
		ArrayList<TruckResultEntity> rolEntities = null;
		TruckResultEntity rolEntity = null;
		// 그룹 데이터
		String groupAgency = null; 
		
		try {
			
			queryHelper = new QueryHelper();
			parameter = new QueryParameter();
			daoHelper = new DAOHelper();

			executor = daoHelper.getDataSourceExecutor("main_code");  
			executor.setNvl("");
			query = queryHelper.getQuery("vehicle.qry", "select_tmplinecode");
			
			executor.setParameter(parameter);
			resultEntities = new ArrayList<TruckResultEntity>();
			resultEntities = (ArrayList<TruckResultEntity>) executor.execute(query);
			
			if ( resultEntities != null && resultEntities.size() > 0) {
				
				rolEntities = new ArrayList<TruckResultEntity>();
				
				for ( int i=0; i<resultEntities.size();i++) {
					resultEntity = new TruckResultEntity();
					resultEntity = resultEntities.get(i);
					
					if ( groupAgency.equals(resultEntity.getAgencyname())) {
						
						
					}else {
						// -1 loop 값이 없을경우
						rolEntity = new TruckResultEntity();
						rolEntity = resultEntity;
					}
					
					groupAgency = resultEntity.getAgencyname();
				}
			}
			
		} catch (Exception e) {
			logger.error(e.toString());
		} 
		return resultEntities;
	}
	
	/**
	 * 검색 설정 (시간대별 검색어)
	 * @return
	 */
	public String setCurrentTimeGroup() {
		//logger.info("검색설정, 시간대 앞자리수 ");
		LocalTime currentTime = LocalTime.now();
		int hour = currentTime.getHourOfDay();
		return Label.TruckServiceLabel.CURRENTTIME.getMsg()+hour;
		//return "A6";
		
	}
	
	/**
	 * 현재시간의 그룹에 대한 자료
	 * 
	 * @return
	 */
	private static DataBox getCurrentTimeGroupData(TruckStandardEntity standardEntity) {

		QueryParameter parameter = null;
		QueryExecutor executor = null;
		QueryHelper queryHelper = null;
		DAOHelper daoHelper = null;
		DataBox dataBox = null;
		Query query = null;

		try {
			
			queryHelper = new QueryHelper();
			parameter = new QueryParameter();
			daoHelper = new DAOHelper();

			executor = daoHelper.getDataSourceExecutor("main_code");
			executor.setNvl("");
			query = queryHelper.getQuery("vehicle.qry", "select_lineinfo");
			//parameter.add(standardEntity.getTargetHour());
			executor.setParameter(parameter);
			dataBox = executor.execute(query.getStatement(), query.getType());
		} catch (Exception e) {
			logger.error("getCurrentTimeGroupData : " + e.toString());
		}
		return dataBox;
	}
	
	private static DataBox getNosunStartPointAgency(TruckStandardEntity standardEntity) {

		QueryParameter parameter = null;
		QueryExecutor executor = null;
		QueryHelper queryHelper = null;
		DAOHelper daoHelper = null;
		DataBox dataBox = null;
		Query query = null;

		try {
			//logger.info("search group : " + standardEntity.getTargetHour());
			queryHelper = new QueryHelper();
			parameter = new QueryParameter();
			daoHelper = new DAOHelper();

			executor = daoHelper.getDataSourceExecutor("main_code");
			executor.setNvl("");
			query = queryHelper.getQuery("vehicle.qry", "select_checknosun");

			parameter.add(standardEntity.getKey_cm_number());
			
			executor.setParameter(parameter);
			dataBox = executor.execute(query.getStatement(), query.getType());

		} catch (Exception e) {
			logger.error(e.toString());
		}
		return dataBox;
	}
	
	/**
	 * 자료 정렬 해서 배열<엔티티> 값을 리턴
	 * @param entities
	 */
	public static void test(ArrayList<TruckStandardEntity> entities) {

		List<TruckStandardEntity> groupedData = new ArrayList<>();
		// 그룹화를 위한 맵
		// key: GEO_NAME
		// value: TruckStandardEntity 객체
		Map<String, TruckStandardEntity> groupMap = new HashMap<>();

		// 데이터 그룹화
		for (TruckStandardEntity entity : entities) {
		    String geoName = entity.getTruckEntryEntity().getGeo_name();

		    // 그룹맵에 해당 그룹 키가 존재하지 않는 경우에만 TruckStandardEntity 추가
		    // 하나의 in, out 데이터만 가지고 싶어
		    if (!groupMap.containsKey(geoName)) {
		        TruckStandardEntity newGroupData = new TruckStandardEntity();
		        newGroupData.setLineCode(entity.getLineCode());
		        newGroupData.setLineName(entity.getLineName());
		        newGroupData.setTargetHour(entity.getTargetHour());
		        newGroupData.setTruckEntryEntityList(new ArrayList<TruckEntryEntity>());
		        groupMap.put(geoName, newGroupData);
		    }

		    // 그룹맵에서 해당 그룹 키에 대한 TruckStandardEntity 객체를 가져옴
		    TruckStandardEntity existingGroupData = groupMap.get(geoName);
		    List<TruckEntryEntity> truckEntryEntityList = existingGroupData.getTruckEntryEntityList();

		    // TruckEntryEntity 객체 생성 및 데이터 추가
		    TruckEntryEntity truckEntryEntity = new TruckEntryEntity();
		    truckEntryEntity.setGeo_date(entity.getTruckEntryEntity().getGeo_date());
		    truckEntryEntity.setGeo_op_type(entity.getTruckEntryEntity().getGeo_op_type());
		    truckEntryEntity.setGeo_time(entity.getTruckEntryEntity().getGeo_time());
		    truckEntryEntity.setCm_number(entity.getTruckEntryEntity().getCm_number());
		    truckEntryEntity.setGeo_name(geoName);

		    // TruckEntryEntity 객체를 리스트에 추가
		    truckEntryEntityList.add(truckEntryEntity);
		}

		// 그룹화된 데이터를 리스트로 변환
		groupedData.addAll(groupMap.values());

		// 결과 출력을 위해 groupedData 리스트를 GEO_DATE와 GEO_TIME으로 정렬
		Collections.sort(groupedData, new Comparator<TruckStandardEntity>() {
		    @Override
		    public int compare(TruckStandardEntity groupData1, TruckStandardEntity groupData2) {
		        // 첫 번째 그룹 데이터의 GEO_DATE와 GEO_TIME을 숫자로 변환
		        long time1 = Long.parseLong(groupData1.getTruckEntryEntityList().get(0).getGeo_date() + groupData1.getTruckEntryEntityList().get(0).getGeo_time());
		        // 두 번째 그룹 데이터의 GEO_DATE와 GEO_TIME을 숫자로 변환
		        long time2 = Long.parseLong(groupData2.getTruckEntryEntityList().get(0).getGeo_date() + groupData2.getTruckEntryEntityList().get(0).getGeo_time());
		        return Long.compare(time1, time2);
		    }
		});

		// 정렬된 데이터 출력
		// GEO_NAME을 그룹화하여 출력
		for (TruckStandardEntity groupData : groupedData) {
		    String geoName = groupData.getTruckEntryEntityList().get(0).getGeo_name();
		    System.out.println("GEO_NAME: " + geoName);
		    
		    List<TruckEntryEntity> truckEntryEntityList = groupData.getTruckEntryEntityList();
		    
		    // 가장 빠른 날짜와 시간을 가진 IN 데이터를 찾기 위한 변수 초기화
		    String earliestInDate = null;
		    String earliestInTime = null;
		    
		    // 가장 늦은 날짜와 시간을 가진 IN 데이터를 찾기 위한 변수 초기화
		    String latestInDate = null;
		    String latestInTime = null;
		    
		    // 가장 빠른 날짜와 시간을 가진 OUT 데이터를 찾기 위한 변수 초기화
		    String earliestOutDate = null;
		    String earliestOutTime = null;
		    
		    // 가장 늦은 날짜와 시간을 가진 OUT 데이터를 찾기 위한 변수 초기화
		    String latestOutDate = null;
		    String latestOutTime = null;
		    
		    // 그룹 내부 데이터 확인
		    for (TruckEntryEntity entry : truckEntryEntityList) {
		        if (entry.getGeo_op_type().equals("IN")) {
		            String currentDate = entry.getGeo_date();
		            String currentTime = entry.getGeo_time();
		            
		            // 가장 빠른 날짜와 시간 업데이트
		            if (earliestInDate == null || currentDate.compareTo(earliestInDate) < 0 ||
		                (currentDate.equals(earliestInDate) && currentTime.compareTo(earliestInTime) < 0)) {
		                earliestInDate = currentDate;
		                earliestInTime = currentTime;
		            }
		            
		            // 가장 늦은 날짜와 시간 업데이트
		            if (latestInDate == null || currentDate.compareTo(latestInDate) > 0 ||
		                (currentDate.equals(latestInDate) && currentTime.compareTo(latestInTime) > 0)) {
		                latestInDate = currentDate;
		                latestInTime = currentTime;
		            }
		        } else if (entry.getGeo_op_type().equals("OUT")) {
		            String currentDate = entry.getGeo_date();
		            String currentTime = entry.getGeo_time();
		            
		            // 가장 빠른 날짜와 시간 업데이트
		            if (earliestOutDate == null || currentDate.compareTo(earliestOutDate) < 0 ||
		                (currentDate.equals(earliestOutDate) && currentTime.compareTo(earliestOutTime) < 0)) {
		                earliestOutDate = currentDate;
		                earliestOutTime = currentTime;
		            }
		            
		            // 가장 늦은 날짜와 시간 업데이트
		            if (latestOutDate == null || currentDate.compareTo(latestOutDate) > 0 ||
		                (currentDate.equals(latestOutDate) && currentTime.compareTo(latestOutTime) > 0)) {
		                latestOutDate = currentDate;
		                latestOutTime = currentTime;
		            }
		        }
		    }
		    
		 // 가장 빠른 IN 데이터 출력
		    if (earliestInDate != null && earliestInTime != null) {
		        System.out.println("GEO_OP_TYPE: IN");
		        System.out.println("GEO_DATE: " + earliestInDate);
		        System.out.println("GEO_TIME: " + earliestInTime);
		    }

		    // 가장 늦은 IN 데이터 출력
		    if (latestInDate != null && latestInTime != null) {
		        System.out.println("GEO_OP_TYPE: IN");
		        System.out.println("GEO_DATE: " + latestInDate);
		        System.out.println("GEO_TIME: " + latestInTime);
		    }

		    // 가장 빠른 OUT 데이터 출력
		    if (earliestOutDate != null && earliestOutTime != null) {
		        System.out.println("GEO_OP_TYPE: OUT");
		        System.out.println("GEO_DATE: " + earliestOutDate);
		        System.out.println("GEO_TIME: " + earliestOutTime);
		    }

		    // 가장 늦은 OUT 데이터 출력
		    if (latestOutDate != null && latestOutTime != null) {
		        System.out.println("GEO_OP_TYPE: OUT");
		        System.out.println("GEO_DATE: " + latestOutDate);
		        System.out.println("GEO_TIME: " + latestOutTime);
		    }

		    System.out.println("==============================");

		}

	}

	
	/**
	 * 자료 저장
	 * @param entities
	 * @param paramSetEntity 
	 */
	private static void isSaveData(ArrayList<TruckStandardEntity> entities, TruckStandardEntity paramSetEntity, DataBox nosun) {
		
		boolean result = false;
		int count[] = null;
		QueryExecutor executor = null;
		QueryHelper queryHelper = null;
		DAOHelper daoHelper = null;
		QueryHandler queryHandler = null;
		QueryParameter parameter = null;
		
		int totalCount = 0;
		daoHelper = new DAOHelper();
		queryHandler = new QueryHandler();
		queryHelper = new QueryHelper();
		Query query = null;
		TruckStandardEntity standardEntity = null;
		
		// 라인코드, 라인명
		StringBuffer realLineCode = null;
		StringBuffer realLineName = null;
		
		try {
			
			// 노선명 파싱
			if( nosun != null && nosun.getRowSize() > 0) {
				realLineCode = new StringBuffer();
				realLineName = new StringBuffer();
				
				for ( int n=0; n < nosun.getRowSize(); n++) {
					realLineCode.append(nosun.getString(n, "linecode"));
					realLineName.append(nosun.getString(n, "linename"));
					if ( (n+1) != nosun.getRowSize() ) {
						realLineCode.append(",");
						realLineName.append(",");
					}
				}
				
				paramSetEntity.setLineCode(realLineCode.toString());
				paramSetEntity.setLineName(realLineName.toString());
			}
			
			if ( realLineCode != null && realLineName != null) {
				executor = daoHelper.getDataSourceExecutor("main_code");
				executor.setNvl(" ");
				
				query = queryHelper.getQuery("vehicle.qry", "insert_lineinfo");
				
				for ( int i=0; i < entities.size(); i ++) {
					
					standardEntity = new TruckStandardEntity();
					standardEntity = entities.get(i);
					
					if (standardEntity.getResponseCode() == Integer.valueOf(Label.TruckServiceLabel.HTTP200.getCode())) {
						if (standardEntity.getErrorMessage() == null || standardEntity.getErrorMessage() == "" || standardEntity.getErrorMessage().length() == 0) {
							
							logger.info("data INSERT :" + standardEntity.toString());
							parameter = new QueryParameter();
							parameter.add(paramSetEntity.getLineCode());
							parameter.add(paramSetEntity.getLineName());
							parameter.add(paramSetEntity.getKey_cm_number());
							parameter.add(paramSetEntity.getTargetHour());
							parameter.add(i+1);
							parameter.add(standardEntity.getTruckEntryEntity().getGeo_name());
							parameter.add(standardEntity.getTruckEntryEntity().getGeo_name());
							parameter.add(standardEntity.getTruckEntryEntity().getGeo_op_type().toUpperCase());
							parameter.add(standardEntity.getTruckEntryEntity().getGeo_date());
							parameter.add(standardEntity.getTruckEntryEntity().getGeo_time());
							parameter.add(paramSetEntity.getKey_date());
							
							queryHandler.add(query, parameter);
							
						}else {
							logger.info("outPut .responseCode : " + standardEntity.getResponseCode() + ", " +  standardEntity.getErrorMessage());
						}
					}
				}
				count = executor.execute(queryHandler);
				
				for( int x=0; count != null && x<count.length; x++ ) {
					totalCount += count[x];
				}

				if( totalCount == queryHandler.getCount() )
					result = true;
				//logger.info(result);
				
				if ( true) {
					//isAfterTreatment();
				}
			}
			
		} catch (DAOException | QueryException e) {
			// TODO Auto-generated catch block
			logger.error("save 1 : " + e);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("save 2 : " + e);
		}
	}
	
	private static void nosunDataParser(DataBox nosun) {
		
		try {
			if ( nosun != null && nosun.getRowSize() > 0) {
				for ( int i=0; i < nosun.getRowSize(); i ++) {
					logger.info(" nosun parser : " + nosun.getString(i, "agencycode") + ", " + nosun.getString(i, "agencyname") + ", "+ nosun.getString(i, "linecode"));
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 미사용
	@SuppressWarnings("unchecked")
	private static String entityToJSON(TruckStandardEntity standardEntity) {

		JSONObject jsonObject = new JSONObject();
		jsonObject.put("responseCode", standardEntity.getResponseCode());
		jsonObject.put("errorMessage", standardEntity.getErrorMessage());
		return jsonObject.toString();
	}

	@SuppressWarnings({ "unchecked", "unused" })
	private String entityToJson(TruckStandardEntity entity) {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("accessKey", entity.getAccessKey());
		jsonObject.put("gubun", entity.getGubun());
		jsonObject.put("key_date", entity.getKey_date());
		jsonObject.put("key_cm_number", entity.getKey_cm_number());
		jsonObject.put("responseCode", entity.getResponseCode());
		jsonObject.put("errorMessage", entity.getErrorMessage());

		// TruckEntryEntity 객체를 JSON 배열로 변환하여 추가
		JSONArray entryArray = new JSONArray();

		List<TruckEntryEntity> entryList = (List<TruckEntryEntity>) entity.getTruckEntryEntity();
		for (TruckEntryEntity entryEntity : entryList) {
			JSONObject entryJson = new JSONObject();
			entryJson.put("geo_date", entryEntity.getGeo_date());
			entryJson.put("geo_time", entryEntity.getGeo_time());
			entryJson.put("cm_number", entryEntity.getCm_number());
			entryJson.put("geo_name", entryEntity.getGeo_name());
			entryJson.put("geo_op_type", entryEntity.getGeo_op_type());
			entryArray.add(entryJson);
		}
		jsonObject.put("truckEntryEntity", entryArray);

		// TruckLocationEntity 객체를 JSON으로 변환하여 추가
		JSONObject locationJson = new JSONObject();
		locationJson.put("tid_id", entity.getTruckLocationEntity().getTid_id());
		locationJson.put("cm_number", entity.getTruckLocationEntity().getCm_number());
		locationJson.put("bi_date", entity.getTruckLocationEntity().getBi_date());
		locationJson.put("bi_time", entity.getTruckLocationEntity().getBi_time());
		locationJson.put("bi_x_position", entity.getTruckLocationEntity().getBi_x_position());
		locationJson.put("bi_y_position", entity.getTruckLocationEntity().getBi_y_position());
		locationJson.put("bi_gps_speed", entity.getTruckLocationEntity().getBi_gps_speed());
		locationJson.put("bi_dist_total", entity.getTruckLocationEntity().getBi_dist_total());
		locationJson.put("bi_turn_onoff", entity.getTruckLocationEntity().getBi_turn_onoff());
		jsonObject.put("truckLocationEntity", locationJson);

		return jsonObject.toJSONString();
	}

	@SuppressWarnings("unused")
	private static boolean isValidParameters(TruckStandardEntity entity) {
		
		if (entity.getAccessKey() == null || entity.getAccessKey().isEmpty()) {
			return false;
		}

		if (entity.getGubun() == null || entity.getGubun().isEmpty()) {
			return false;
		}

		if (entity.getKey_date() == null || entity.getKey_date().isEmpty()) {
			return false;
		}

		if (entity.getResponseType() == null || entity.getResponseType().isEmpty()) {
			return false;
		}

		return true;
	}
	
	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		
		TruckStandardEntity paramSetEntity = null;
		ArrayList<TruckStandardEntity> entities = null;
		
		try {
			paramSetEntity = new TruckStandardEntity();
			paramSetEntity.setAccessKey(getAccessKey().getAccessKey());
			paramSetEntity.setGubun(Label.TruckServiceLabel.ONE.getMsg());
			//paramSetEntity.setKey_date(DateUtil.getCurrentDate().replace("-", ""));
			paramSetEntity.setKey_date("20230609");
			paramSetEntity.setResponseType(Label.TruckServiceLabel.ARRAY.getMsg());
			
			if ( isValidParameters(paramSetEntity)) {
				/* param Setting */
					paramSetEntity.setKey_cm_number("강원80바5738");
					//paramSetEntity.setLineCode("505201");
					System.out.println(paramSetEntity.toString());	
					// 자료를 받아온다
					Object result = null;
					entities = new ArrayList<TruckStandardEntity>();
					
					result = getEntryInfo(paramSetEntity);
					entities = (ArrayList<TruckStandardEntity>) result;
					
					if ( entities != null && entities.size() > 0) {
						
						/*List<TruckEntryEntity> truckEntries = new ArrayList<>();
						
						for ( TruckStandardEntity entity : entities) {
				            boolean isOutEntry = entity.getTruckEntryEntity().getGeo_op_type().equals("Out");
				            TruckStandardEntity lastEntry = entities.isEmpty() ? null : entities.get(entities.size() - 1);
				            
				            if (isOutEntry && lastEntry != null && lastEntry.getTruckEntryEntity().getCm_number().equals(entity.getTruckEntryEntity().getCm_number()) && lastEntry.getTruckEntryEntity().getGeo_op_type().equals("In")) {
				                lastEntry.getTruckEntryEntity().setEntryTimeOUt(entity.getTruckEntryEntity().getGeo_time());
				            } else {
				                TruckEntryEntity newEntry = new TruckEntryEntity();
				                newEntry.setCm_number(entity.getTruckEntryEntity().getCm_number());
				                
				                newEntry.setGeo_op_type(entity.getTruckEntryEntity().getGeo_op_type());
				                newEntry.setGeo_date(entity.getTruckEntryEntity().getGeo_date());
				                newEntry.setGeo_name(entity.getTruckEntryEntity().getGeo_name());
				                newEntry.setEntryTimeIn(entity.getTruckEntryEntity().getGeo_time());
				                newEntry.setEntryTimeOUt(null);
				                truckEntries.add(newEntry);
				            }
						}
						
						if ( truckEntries != null && truckEntries.size() > 0) {
							TruckEntryEntity truckEntryEntity = null;
							for ( int a=0; a < truckEntries.size(); a++) {
								truckEntryEntity = new TruckEntryEntity();
								truckEntryEntity = truckEntries.get(a);
								System.out.println(truckEntryEntity.toString());
							}
						}*/
						
						Map<String, TruckEntryEntity> truckEntriesMap = new HashMap<>();

					    for (TruckStandardEntity entity : entities) {
					        String key = entity.getTruckEntryEntity().getCm_number();
					        String opType = entity.getTruckEntryEntity().getGeo_op_type();
					        String time = entity.getTruckEntryEntity().getGeo_time();

					        if (key != null && opType != null && time != null) {
					            if (truckEntriesMap.containsKey(key)) {
					                TruckEntryEntity existingEntry = truckEntriesMap.get(key);

					                if (opType.equals("IN")) {
					                    if (existingEntry.getEntryTimeIn() == null || time.compareTo(existingEntry.getEntryTimeIn()) < 0) {
					                        existingEntry.setEntryTimeIn(time);
					                    }
					                } else if (opType.equals("OUT")) {
					                    if (existingEntry.getEntryTimeOUt() == null || time.compareTo(existingEntry.getEntryTimeOUt()) > 0) {
					                        existingEntry.setEntryTimeOUt(time);
					                    }
					                }
					            } else {
					                TruckEntryEntity newEntry = new TruckEntryEntity();
					                newEntry.setCm_number(key);
					                newEntry.setGeo_date(entity.getTruckEntryEntity().getGeo_date());
					                newEntry.setGeo_name(entity.getTruckEntryEntity().getGeo_name());
					                newEntry.setEntryTimeIn(opType.equals("IN") ? time : null);
					                newEntry.setEntryTimeOUt(opType.equals("OUT") ? time : null);

					                truckEntriesMap.put(key, newEntry);
					            }
					        }
					    }

					    List<TruckEntryEntity> truckEntries = new ArrayList<>();

					    for (TruckEntryEntity entry : truckEntriesMap.values()) {
					        if (entry.getEntryTimeIn() != null && entry.getEntryTimeOUt() != null) {
					            truckEntries.add(entry);
					        }
					    }

					    // 결과 출력
					    for (TruckEntryEntity entry : truckEntries) {
					        System.out.println(entry.toString());
					    }
						
					}else {
						System.out.println("outPut .responseCode : " );
					}
			}else {
				System.out.println(Label.TruckServiceLabel.PARAM_ERROR.getMsg());
			}

		} catch (Exception e) {
			System.out.println(e);
		}
	}
	
	public static void sONEDataParser(ArrayList<TruckStandardEntity> entities) {
		
		/**
		 * 대전89아4125
		 */
	}
}